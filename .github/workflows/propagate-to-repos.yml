name: Propagate org-standards Updates

# Triggers when org-standards main branch is updated
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      repos:
        description: 'Comma-separated list of repos to update (leave empty for all)'
        required: false
        default: ''

jobs:
  propagate:
    name: Update dependent repos
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # List of all repos that use org-standards as a submodule
        repo:
          - StyleGuru/syra
          - StyleGuru/StyleGuru
          - StyleGuru/syra-playground
          # Add more repos here as they adopt org-standards

      # Don't cancel other repo updates if one fails
      fail-fast: false

    steps:
      - name: Check if repo should be updated
        id: check_repo
        run: |
          REPOS_INPUT="${{ github.event.inputs.repos }}"
          CURRENT_REPO="${{ matrix.repo }}"

          # If manual trigger with specific repos, check if this repo is in the list
          if [ -n "$REPOS_INPUT" ]; then
            if echo "$REPOS_INPUT" | tr ',' '\n' | grep -qx "$CURRENT_REPO"; then
              echo "should_update=true" >> $GITHUB_OUTPUT
            else
              echo "should_update=false" >> $GITHUB_OUTPUT
            fi
          else
            # Auto trigger - update all repos
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout dependent repo
        if: steps.check_repo.outputs.should_update == 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          submodules: recursive

      - name: Update org-standards submodule
        if: steps.check_repo.outputs.should_update == 'true'
        id: update_submodule
        run: |
          git config user.name "org-standards-bot"
          git config user.email "noreply@example.com"

          # Update submodule to latest main
          cd org-standards
          git fetch origin main
          git checkout origin/main
          cd ..

          # Check if there are changes
          if git diff --quiet org-standards; then
            echo "No updates needed for ${{ matrix.repo }}"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Get the commit message from org-standards
            ORG_STANDARDS_COMMIT=$(cd org-standards && git rev-parse --short HEAD)
            ORG_STANDARDS_MSG=$(cd org-standards && git log -1 --pretty=%B)

            echo "commit_hash=$ORG_STANDARDS_COMMIT" >> $GITHUB_OUTPUT
            echo "commit_msg<<EOF" >> $GITHUB_OUTPUT
            echo "$ORG_STANDARDS_MSG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Sync devcontainer.json from org-standards template
        if: steps.check_repo.outputs.should_update == 'true'
        id: sync_devcontainer
        run: |
          # Check if repo uses devcontainer
          if [ ! -d ".devcontainer" ]; then
            echo "⏭️  Repo does not use devcontainer, skipping sync"
            echo "devcontainer_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Copy template to repo (overwrite local copy with template)
          cp org-standards/devcontainer/devcontainer.json .devcontainer/devcontainer.json

          # Check if devcontainer.json changed
          if git diff --quiet .devcontainer/devcontainer.json; then
            echo "✅ devcontainer.json already in sync with template"
            echo "devcontainer_changed=false" >> $GITHUB_OUTPUT
          else
            echo "📝 devcontainer.json updated from org-standards template"
            git add .devcontainer/devcontainer.json
            echo "devcontainer_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if any changes need to be committed
        if: steps.check_repo.outputs.should_update == 'true'
        id: check_changes
        run: |
          # Has changes if either submodule OR devcontainer changed
          if [ "${{ steps.update_submodule.outputs.has_changes }}" == "true" ] || \
             [ "${{ steps.sync_devcontainer.outputs.devcontainer_changed }}" == "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create introspection doc
        if: steps.check_repo.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          TODAY=$(date +%Y-%m-%d)
          TIMESTAMP=$(date +%H%M%S)
          INTROSPECTION_FILE=".ai-sessions/$TODAY/commit-bot-propagate-$TIMESTAMP.md"

          mkdir -p ".ai-sessions/$TODAY"

          COMMIT_HASH="${{ steps.update_submodule.outputs.commit_hash }}"

          cat > "$INTROSPECTION_FILE" <<'EOF'
          # AI Introspection Session Log

          ---
          **Date**: $(date +%Y-%m-%d)
          **Time**: $(date +%H:%M:%S)
          **Actor**: org-standards-bot
          **Event Type**: commit
          **Confidence**: 10/10
          **Tags**: [automated, org-standards-propagation, bot]
          ---

          ## What Was the Problem?

          Automated propagation of org-standards updates to dependent repositories. No problem - routine org-standards sync.

          ## Why Did It Happen?

          org-standards main branch was updated. This workflow automatically creates PRs in dependent repos to:
          1. Update org-standards submodule pointer
          2. Sync devcontainer.json from org-standards template (single source of truth)

          **Context I Lacked**:
          - N/A - Automated task

          **Assumptions I Made**:
          - org-standards changes are backward compatible with this repo
          - PR will be reviewed before merge

          **Patterns I Followed**:
          - Standard org-standards propagation workflow

          ## How Could It Have Been Prevented?

          **AI Could Have**:
          - N/A - No issues encountered

          **Human Could Have**:
          - N/A - No issues encountered

          **System Could Have**:
          - N/A - No issues encountered

          ## Actionable Changes

          **CLAUDE.md Updates Needed**:
          - [ ] None

          **New Questions to Ask**:
          - [ ] None

          ## Pattern Recognition

          **Similar Issues**:
          - None - routine org-standards propagation

          **Recurring Theme**:
          - None - no challenges in automated propagation
          EOF

          echo "📝 Created introspection doc: $INTROSPECTION_FILE"

      - name: Create PR
        if: steps.check_repo.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          COMMIT_HASH="${{ steps.update_submodule.outputs.commit_hash }}"
          BRANCH_NAME="chore/update-org-standards-${COMMIT_HASH}"

          # Create and checkout new branch
          git checkout -b "$BRANCH_NAME"

          # Stage all changes (submodule, devcontainer, introspection doc)
          git add org-standards .devcontainer/devcontainer.json .ai-sessions/

          # Build commit message based on what changed
          cat > commit_msg.txt <<EOF
          chore: sync org-standards configuration

          EOF

          if [ "${{ steps.update_submodule.outputs.has_changes }}" == "true" ]; then
            cat >> commit_msg.txt <<EOF
          org-standards submodule → ${COMMIT_HASH}
          ${{ steps.update_submodule.outputs.commit_msg }}

          EOF
          fi

          if [ "${{ steps.sync_devcontainer.outputs.devcontainer_changed }}" == "true" ]; then
            cat >> commit_msg.txt <<EOF
          devcontainer.json → synced from org-standards template (single source of truth)

          EOF
          fi

          cat >> commit_msg.txt <<EOF
          This PR was automatically created by org-standards propagation workflow.

          🤖 Generated with org-standards propagation bot
          EOF

          git commit -F commit_msg.txt

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR using gh CLI
          cat > pr_body.txt <<EOF
          ## org-standards Sync

          This PR syncs org-standards configuration to this repo.

          EOF

          if [ "${{ steps.update_submodule.outputs.has_changes }}" == "true" ]; then
            cat >> pr_body.txt <<EOF
          ### org-standards Submodule Update

          **Commit**: [$COMMIT_HASH](https://github.com/TheNeerajGarg/org-standards/commit/$COMMIT_HASH)

          **Changes**:
          \`\`\`
          ${{ steps.update_submodule.outputs.commit_msg }}
          \`\`\`

          EOF
          fi

          if [ "${{ steps.sync_devcontainer.outputs.devcontainer_changed }}" == "true" ]; then
            cat >> pr_body.txt <<EOF
          ### devcontainer.json Sync

          ✅ Synced \`.devcontainer/devcontainer.json\` from org-standards template (single source of truth)

          **Impact**: Dev container config now matches org-standards exactly:
          - All repos use identical dev environment
          - GH_TOKEN-like fixes auto-propagate
          - No more manual sync errors

          EOF
          fi

          cat >> pr_body.txt <<EOF
          ## What to Review

          1. Check if any breaking changes in org-standards affect this repo
          2. Run local tests: \`pytest\`
          3. Check pre-push hook still works: \`.git/hooks/pre-push\`
          4. Review quality gate configuration changes (if any)
          5. If devcontainer changed: Rebuild container after merge

          ## How to Test

          \`\`\`bash
          # Pull this branch
          git checkout $BRANCH_NAME
          git submodule update --init --recursive

          # Test pre-push hook
          .git/hooks/pre-push

          # Run tests
          pytest
          \`\`\`

          ## Merge Checklist

          - [ ] CI/CD passes
          - [ ] Pre-push hook tested locally
          - [ ] No breaking changes for this repo
          - [ ] Quality gates still appropriate

          ---

          🤖 **Automated PR** - Created by [org-standards propagation workflow](https://github.com/TheNeerajGarg/org-standards/blob/main/.github/workflows/propagate-to-repos.yml)

          To disable auto-updates for this repo, remove it from the workflow matrix.
          EOF

          # Determine PR title based on what changed
          if [ "${{ steps.update_submodule.outputs.has_changes }}" == "true" ] && \
             [ "${{ steps.sync_devcontainer.outputs.devcontainer_changed }}" == "true" ]; then
            PR_TITLE="chore: sync org-standards configuration (submodule + devcontainer)"
          elif [ "${{ steps.update_submodule.outputs.has_changes }}" == "true" ]; then
            PR_TITLE="chore: update org-standards to ${COMMIT_HASH}"
          else
            PR_TITLE="chore: sync devcontainer.json from org-standards"
          fi

          # Create PR (labels are optional - don't fail if they don't exist)
          gh pr create \
            --title "$PR_TITLE" \
            --body-file pr_body.txt \
            --base main \
            --head "$BRANCH_NAME" || \
          gh pr create \
            --title "$PR_TITLE" \
            --body-file pr_body.txt \
            --base main \
            --head "$BRANCH_NAME"

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_repo.outputs.should_update }}" != "true" ]; then
            echo "⏭️ Skipped ${{ matrix.repo }} (not in manual trigger list)"
          elif [ "${{ steps.check_changes.outputs.has_changes }}" != "true" ]; then
            echo "✅ ${{ matrix.repo }} is already up to date"
          else
            echo "📬 Created PR for ${{ matrix.repo }}"
          fi
