#!/bin/bash
# Pre-commit Hook: Quality warnings (NON-BLOCKING)
#
# Philosophy: Support WIP workflow - warn about issues but never block commits
# Enforcement happens at pre-push stage (before sharing code with team)
#
# Source: org-standards/git-hooks/pre-commit
# Version: 1.0.0 (2025-01-23)

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Pre-commit quality checks (warnings only)...${NC}"
echo ""

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)

# If no files staged, allow commit (empty commit)
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✅ No files staged - empty commit allowed${NC}"
    exit 0
fi

# Get current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)

# ============================================================================
# 1. Introspection Document Check (Loosened for WIP)
# ============================================================================

# Only enforce introspection for:
# - Direct commits to main branch
# - Significant changes (>10 files or architectural changes)
if [ "$BRANCH" = "main" ] || [ $(echo "$STAGED_FILES" | wc -l) -gt 10 ]; then
    echo -e "${BLUE}📝 Checking for introspection document...${NC}"

    COMMIT_HASH=$(git write-tree)
    SHORT_HASH=${COMMIT_HASH:0:7}
    TODAY=$(date +%Y-%m-%d)
    INTROSPECTION_FILE=".ai-sessions/$TODAY/commit-$SHORT_HASH.md"

    if [ ! -f "$INTROSPECTION_FILE" ]; then
        echo -e "${YELLOW}⚠️  WARNING: Missing introspection document${NC}"
        echo "   Expected: $INTROSPECTION_FILE"
        echo "   This is required for main branch or significant changes"
        echo ""

        if [ "$BRANCH" = "main" ]; then
            echo -e "${RED}❌ BLOCKED: Introspection required for main branch${NC}"
            echo ""
            echo "Create: cp .ai-session-template.md $INTROSPECTION_FILE"
            exit 1
        fi
    else
        # Auto-stage introspection file if not already staged
        if ! git diff --cached --name-only | grep -q "$INTROSPECTION_FILE"; then
            git add "$INTROSPECTION_FILE" 2>/dev/null || true
        fi
        echo -e "${GREEN}✅ Introspection document found${NC}"
    fi
    echo ""
fi

# ============================================================================
# 2. Auto-format with Ruff (Non-blocking, auto-fixes)
# ============================================================================

echo -e "${BLUE}🎨 Auto-formatting code...${NC}"
if command -v ruff &> /dev/null; then
    ruff format . --quiet 2>/dev/null || true
    echo -e "${GREEN}✅ Code formatted${NC}"
else
    echo -e "${YELLOW}⚠️  WARNING: ruff not installed (skipping format)${NC}"
fi
echo ""

# ============================================================================
# 3. Test Execution (WARN ONLY - non-blocking)
# ============================================================================

echo -e "${BLUE}🧪 Running tests...${NC}"
if command -v pytest &> /dev/null; then
    # Run tests with minimal output
    if pytest --tb=line -q --co -q &> /dev/null; then
        # Tests can be collected, now run them
        if pytest --tb=line -q 2>/dev/null; then
            echo -e "${GREEN}✅ All tests passing${NC}"
        else
            echo -e "${YELLOW}⚠️  WARNING: Some tests are failing${NC}"
            echo "   This is OK for WIP commits, but fix before pushing"
            echo ""
            echo "   Run 'pytest -v' to see failures"
        fi
    else
        echo -e "${YELLOW}⚠️  WARNING: Test collection issues${NC}"
        echo "   Some test files may have import errors"
    fi
else
    echo -e "${YELLOW}⚠️  WARNING: pytest not installed (skipping tests)${NC}"
fi
echo ""

# ============================================================================
# 4. Coverage Check (WARN ONLY - non-blocking)
# ============================================================================

echo -e "${BLUE}📊 Checking coverage...${NC}"
if command -v pytest &> /dev/null; then
    # Try to get coverage percentage
    COVERAGE_OUTPUT=$(pytest --cov=src --cov=. --cov-report=term-missing:skip-covered -q 2>/dev/null | grep "TOTAL" || echo "")

    if [ -n "$COVERAGE_OUTPUT" ]; then
        COVERAGE=$(echo "$COVERAGE_OUTPUT" | awk '{print $4}' | sed 's/%//')

        if [ -n "$COVERAGE" ] && [ "$COVERAGE" -lt 80 ]; then
            echo -e "${YELLOW}⚠️  WARNING: Coverage is ${COVERAGE}% (target: 80%)${NC}"
            echo "   This is OK for WIP commits, but add tests before pushing"
            echo ""
            echo "   Run 'pytest --cov=src --cov-report=term-missing' to see uncovered lines"
        elif [ -n "$COVERAGE" ]; then
            echo -e "${GREEN}✅ Coverage: ${COVERAGE}% (meets 80% threshold)${NC}"
        fi
    else
        echo -e "${YELLOW}⚠️  No coverage data available${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  WARNING: pytest not installed (skipping coverage)${NC}"
fi
echo ""

# ============================================================================
# 5. Type Checking (WARN ONLY - non-blocking)
# ============================================================================

echo -e "${BLUE}🔍 Type checking...${NC}"
if command -v mypy &> /dev/null; then
    # Check if there's a src directory
    if [ -d "src" ]; then
        if mypy src/ --no-error-summary --no-pretty 2>&1 | grep -q "Success"; then
            echo -e "${GREEN}✅ No type errors${NC}"
        else
            echo -e "${YELLOW}⚠️  WARNING: Type errors found${NC}"
            echo "   This is OK for WIP commits, but fix before pushing"
            echo ""
            echo "   Run 'mypy src/' to see details"
        fi
    else
        echo -e "${YELLOW}⚠️  No src/ directory found (skipping mypy)${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  WARNING: mypy not installed (skipping type check)${NC}"
fi
echo ""

# ============================================================================
# 6. Linting Check (WARN ONLY - non-blocking)
# ============================================================================

echo -e "${BLUE}🔎 Linting check...${NC}"
if command -v ruff &> /dev/null; then
    if ruff check . --quiet 2>&1; then
        echo -e "${GREEN}✅ No linting errors${NC}"
    else
        echo -e "${YELLOW}⚠️  WARNING: Linting errors found${NC}"
        echo "   This is OK for WIP commits, but fix before pushing"
        echo ""
        echo "   Run 'ruff check .' to see details"
        echo "   Run 'ruff check . --fix' to auto-fix"
    fi
else
    echo -e "${YELLOW}⚠️  WARNING: ruff not installed (skipping lint)${NC}"
fi
echo ""

# ============================================================================
# Summary
# ============================================================================

echo "═══════════════════════════════════════════════"
echo -e "${GREEN}✅ Commit allowed${NC}"
echo ""
echo "Fix any warnings above before pushing to origin"
echo "Pre-push hook will enforce quality standards"
echo "═══════════════════════════════════════════════"
echo ""

exit 0  # ALWAYS allow commit (warnings only)
